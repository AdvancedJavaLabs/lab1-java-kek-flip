package org.itmo;

import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.stream.Collector;
import java.util.stream.Collectors;

class Graph {
    private final int V;
    private final ArrayList<Integer>[] adjList;
    private final ExecutorService executor;

    Graph(int vertices) {
        this.V = vertices;
        adjList = new ArrayList[vertices];
        for (int i = 0; i < vertices; ++i) {
            adjList[i] = new ArrayList<>();
        }

        executor = Executors.newFixedThreadPool(12);
    }

    void addEdge(int src, int dest) {
        if (!adjList[src].contains(dest)) {
            adjList[src].add(dest);
        }
    }

    void parallelBFS(int startVertex) {
        AtomicBoolean[] visited = new AtomicBoolean[V];
        for (Integer i = 0; i < V; i++) {
            visited[i] = new AtomicBoolean(false);
        }

        QueueBalancer<Integer> balancer = new QueueBalancer<>(12);
        Queue<Integer> nextVertexes = new ConcurrentLinkedQueue<>();

        visited[startVertex].set(true);
        nextVertexes.add(startVertex);

        while (!nextVertexes.isEmpty()) {
            while (!nextVertexes.isEmpty()) {
                balancer.add(nextVertexes.poll());
            }

            balancer.getQueues().stream()
                    .map((queue) -> executor.submit(() -> {
                        while (!queue.isEmpty()) {
                            Integer vertex = queue.poll();

                            for (int n : adjList[vertex]) {
                                Boolean isVisited = visited[n].getAndSet(true);
                                if (!isVisited) {
                                    nextVertexes.add(n);
                                }
                            }
                        }
                    })).forEach((future) -> {
                        try {
                            future.get();
                        } catch (InterruptedException | ExecutionException e) {
                            e.printStackTrace();
                        }
                    });
        }
    }

    // Generated by ChatGPT
    void bfs(int startVertex) {
        boolean[] visited = new boolean[V];

        LinkedList<Integer> queue = new LinkedList<>();

        visited[startVertex] = true;
        queue.add(startVertex);

        while (!queue.isEmpty()) {
            startVertex = queue.poll();

            for (int n : adjList[startVertex]) {
                if (!visited[n]) {
                    visited[n] = true;
                    queue.add(n);
                }
            }
        }
    }

}
